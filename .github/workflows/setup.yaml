name: Reusable Setup
on:
  workflow_call:
    inputs:
      python-version:
        required: false
        type: string
        default: "3.12"
      install-deps:
        required: false
        type: string
        default: "dev"  # dev, docs, or none
    secrets:
      OP_SERVICE_ACCOUNT_TOKEN:
        required: false
    outputs:
      python-version:
        description: "The Python version that was set up"
        value: ${{ jobs.setup.outputs.python-version }}
      PERSONAL_ACCESS_TOKEN:
        description: "The personal access token"
        value: ${{ jobs.setup.outputs.PERSONAL_ACCESS_TOKEN }}

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      python-version: ${{ steps.setup-python.outputs.python-version }}
      PERSONAL_ACCESS_TOKEN: ${{ steps.set-token.outputs.PERSONAL_ACCESS_TOKEN }}
    steps:
      - name: Load secret
        uses: 1password/load-secrets-action@v2
        with:
          export-env: true
        env:
          OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
          PERSONAL_ACCESS_TOKEN: op://shawndengdev/github_access_token/credential

      - name: Set token output
        id: set-token
        run: |
          if [ -z "${PERSONAL_ACCESS_TOKEN}" ]; then
            echo "Error: PERSONAL_ACCESS_TOKEN is not set"
            exit 1
          fi
          echo "PERSONAL_ACCESS_TOKEN=${PERSONAL_ACCESS_TOKEN}" >> $GITHUB_OUTPUT

      - name: Debug token (setup job)
        run: |
          echo "Token is set: ${{ steps.set-token.outputs.PERSONAL_ACCESS_TOKEN != '' }}"
          echo "Token first char: ${PERSONAL_ACCESS_TOKEN:0:1}"

      - name: Check out
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ github.token }}

      - name: Setup Python
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python-version }}

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          version: ">=0.4.0"

      - name: Get uv cache dir
        id: get-uv-cache
        run: echo "UV_CACHE_DIR=$(uv cache dir)" >> $GITHUB_OUTPUT

      - name: Install dependencies
        if: ${{ inputs.install-deps != 'none' }}
        run: uv sync --extra ${{ inputs.install-deps }}

      - name: Cache uv packages
        uses: actions/cache@v4
        with:
          path: ${{ steps.get-uv-cache.outputs.UV_CACHE_DIR }}
          key: ${{ runner.os }}-uv-${{ hashFiles('**/pyproject.toml', '**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-uv-
