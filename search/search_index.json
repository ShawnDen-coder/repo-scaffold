{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"repo-scaffold","text":"<p>A modern project scaffolding tool that helps you quickly create standardized project structures with best practices.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>\ud83d\ude80 Quick project initialization with modern best practices</li> <li>\ud83d\udce6 Project templates with standardized structure</li> <li>\u2699\ufe0f Interactive project configuration</li> <li>\ud83d\udd27 Pre-configured development tools (ruff, pytest, nox)</li> <li>\ud83d\udcda Documentation setup with MkDocs Material</li> <li>\ud83d\udd04 GitHub Actions workflows included</li> </ul>"},{"location":"#installation","title":"Installation","text":"<pre><code># Using uvx (recommended)\nuvx install repo-scaffold\n\n# Using pip\npip install repo-scaffold\n\n# Using poetry\npoetry add repo-scaffold\n</code></pre>"},{"location":"#quick-start","title":"Quick Start","text":"<pre><code># List available templates\nrepo-scaffold list\n\n# Create a new project\nrepo-scaffold create python\n\n# Create a project in a specific directory\nrepo-scaffold create python -o ./my-projects\n</code></pre>"},{"location":"#available-templates","title":"Available Templates","text":"<p>Currently supported project templates:</p> <ul> <li>Python Project Template</li> <li>Modern Python project structure</li> <li>Testing setup with pytest and nox</li> <li>Documentation with MkDocs Material</li> <li>Code quality with ruff</li> <li>GitHub Actions CI/CD workflows</li> <li>Dependency management with your choice of tool</li> <li>Automated version management</li> <li>MIT License template</li> </ul>"},{"location":"#development-setup","title":"Development Setup","text":"<p>To set up the development environment:</p> <pre><code># Clone the repository\ngit clone https://github.com/ShawnDen-coder/repo-scaffold.git\ncd repo-scaffold\n\n# Create and activate virtual environment\npython -m venv .venv\nsource .venv/bin/activate  # On Windows: .venv\\Scripts\\activate\n\n# Install development dependencies\npip install -e \".[dev,docs]\"\n</code></pre>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li>repo_scaffold<ul> <li>cli</li> </ul> </li> </ul>"},{"location":"reference/repo_scaffold/","title":"Index","text":""},{"location":"reference/repo_scaffold/#repo_scaffold","title":"repo_scaffold","text":"<p>Repository scaffolding package for project initialization and setup.</p> <p>This package provides tools and utilities for scaffolding new Python projects with standardized structure and best practices. It serves as the main entry point for the repo_scaffold package functionality.</p> <p>Typical usage example:</p> <pre><code>import repo_scaffold\n\nscaffold = repo_scaffold.create_project()\nscaffold.setup_structure()\n</code></pre> ATTRIBUTE DESCRIPTION <code>__author__</code> <p>Package author information.</p> <p> </p>"},{"location":"reference/repo_scaffold/cli/","title":"cli","text":""},{"location":"reference/repo_scaffold/cli/#repo_scaffold.cli","title":"repo_scaffold.cli","text":"<p>Repository scaffolding CLI tool.</p> <p>This module provides a command-line interface for creating new projects from templates. It serves as the main entry point for the repo-scaffold tool.</p> Example <p>To use this module as a CLI tool:</p> <pre><code># List available templates\n$ repo-scaffold list\n\n# Create a new project\n$ repo-scaffold create python\n</code></pre> <p>To use this module in your code:</p> <pre><code>from repo_scaffold.cli import cli\n\nif __name__ == '__main__':\n    cli()\n</code></pre>"},{"location":"reference/repo_scaffold/cli/#repo_scaffold.cli.cli","title":"cli","text":"<pre><code>cli()\n</code></pre> <p>Modern project scaffolding tool.</p> <p>Provides multiple project templates for quick project initialization. Use <code>repo-scaffold list</code> to view available templates, or <code>repo-scaffold create &lt;template&gt;</code> to create a new project.</p> Source code in <code>repo_scaffold/cli.py</code> <pre><code>@click.group()\ndef cli():\n    \"\"\"Modern project scaffolding tool.\n\n    Provides multiple project templates for quick project initialization.\n    Use `repo-scaffold list` to view available templates,\n    or `repo-scaffold create &lt;template&gt;` to create a new project.\n    \"\"\"\n</code></pre>"},{"location":"reference/repo_scaffold/cli/#repo_scaffold.cli.create","title":"create","text":"<pre><code>create(template: str, output_dir: Path, no_input: bool)\n</code></pre> <p>Create a new project from a template.</p> <p>Creates a new project based on the specified template. If no template is specified, displays a list of available templates. The project generation process is interactive and will prompt for necessary configuration values.</p> PARAMETER DESCRIPTION <code>template</code> <p>Template name or title (e.g., 'template-python' or 'python')</p> <p> TYPE: <code>str</code> </p> <code>output_dir</code> <p>Target directory where the project will be created</p> <p> TYPE: <code>Path</code> </p> Example <p>Create a Python project:     <pre><code>$ repo-scaffold create python\n</code></pre></p> <p>Specify output directory:     <pre><code>$ repo-scaffold create python -o ./projects\n</code></pre></p> <p>View available templates:     <pre><code>$ repo-scaffold list\n</code></pre></p> Source code in <code>repo_scaffold/cli.py</code> <pre><code>@cli.command()\n@click.argument(\"template\", required=False)\n@click.option(\n    \"--output-dir\",\n    \"-o\",\n    default=\".\",\n    type=click.Path(file_okay=False, dir_okay=True, path_type=Path),\n    help=\"Directory where the project will be created\",\n)\n@click.option(\n    \"--no-input\",\n    is_flag=True,\n    help=\"Do not prompt for parameters and only use cookiecutter.json file content\",\n)\ndef create(template: str, output_dir: Path, no_input: bool):  # noqa: D417\n    \"\"\"Create a new project from a template.\n\n    Creates a new project based on the specified template. If no template is specified,\n    displays a list of available templates. The project generation process is interactive\n    and will prompt for necessary configuration values.\n\n    Args:\n        template: Template name or title (e.g., 'template-python' or 'python')\n        output_dir: Target directory where the project will be created\n\n    Example:\n        Create a Python project:\n            ```bash\n            $ repo-scaffold create python\n            ```\n\n        Specify output directory:\n            ```bash\n            $ repo-scaffold create python -o ./projects\n            ```\n\n        View available templates:\n            ```bash\n            $ repo-scaffold list\n            ```\n    \"\"\"\n    templates = load_templates()\n\n    # \u5982\u679c\u6ca1\u6709\u6307\u5b9a\u6a21\u677f,\u8ba9 cookiecutter \u5904\u7406\u6a21\u677f\u9009\u62e9\n    if not template:\n        click.echo(\"Please select a template to use:\")\n        for name, info in templates.items():\n            click.echo(f\"  {info['title']} - {name}\")\n            click.echo(f\"    {info['description']}\")\n        return\n\n    # \u67e5\u627e\u6a21\u677f\u914d\u7f6e\n    template_info = None\n    for name, info in templates.items():\n        if name == template or info[\"title\"] == template:\n            template_info = info\n            break\n\n    if not template_info:\n        click.echo(f\"Error: Template '{template}' not found\")\n        click.echo(\"\\nAvailable templates:\")\n        for name, info in templates.items():\n            click.echo(f\"  {info['title']} - {name}\")\n        return\n\n    # \u4f7f\u7528\u6a21\u677f\u521b\u5efa\u9879\u76ee\n    template_path = get_package_path(os.path.join(\"templates\", template_info[\"path\"]))\n    cookiecutter(\n        template=template_path,\n        output_dir=str(output_dir),\n        no_input=no_input,  # \u6839\u636e\u7528\u6237\u9009\u62e9\u51b3\u5b9a\u662f\u5426\u542f\u7528\u4ea4\u4e92\u5f0f\u8f93\u5165\n    )\n</code></pre>"},{"location":"reference/repo_scaffold/cli/#repo_scaffold.cli.get_package_path","title":"get_package_path","text":"<pre><code>get_package_path(relative_path: str) -&gt; str\n</code></pre> <p>Get absolute path to a resource in the package.</p> PARAMETER DESCRIPTION <code>relative_path</code> <p>Path relative to the package root</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>str</code> <p>Absolute path to the resource</p> <p> TYPE: <code>str</code> </p> Source code in <code>repo_scaffold/cli.py</code> <pre><code>def get_package_path(relative_path: str) -&gt; str:\n    \"\"\"Get absolute path to a resource in the package.\n\n    Args:\n        relative_path: Path relative to the package root\n\n    Returns:\n        str: Absolute path to the resource\n    \"\"\"\n    # \u4f7f\u7528 files() \u83b7\u53d6\u5305\u8d44\u6e90\n    package_files = importlib.resources.files(\"repo_scaffold\")\n    resource_path = package_files.joinpath(relative_path)\n    if not (resource_path.is_file() or resource_path.is_dir()):\n        raise FileNotFoundError(f\"Resource not found: {relative_path}\")\n    return str(resource_path)\n</code></pre>"},{"location":"reference/repo_scaffold/cli/#repo_scaffold.cli.list","title":"list","text":"<pre><code>list()\n</code></pre> <p>List all available project templates.</p> <p>Displays the title and description of each template to help users choose the appropriate template for their needs.</p> Example <pre><code>$ repo-scaffold list\nAvailable templates:\n\npython - template-python\n  Description: template for python project\n</code></pre> Source code in <code>repo_scaffold/cli.py</code> <pre><code>@cli.command()\ndef list():\n    \"\"\"List all available project templates.\n\n    Displays the title and description of each template to help users\n    choose the appropriate template for their needs.\n\n    Example:\n        ```bash\n        $ repo-scaffold list\n        Available templates:\n\n        python - template-python\n          Description: template for python project\n        ```\n    \"\"\"\n    templates = load_templates()\n    click.echo(\"\\nAvailable templates:\")\n    for name, info in templates.items():\n        click.echo(f\"\\n{info['title']} - {name}\")\n        click.echo(f\"  Description: {info['description']}\")\n</code></pre>"},{"location":"reference/repo_scaffold/cli/#repo_scaffold.cli.load_templates","title":"load_templates","text":"<pre><code>load_templates() -&gt; dict[str, Any]\n</code></pre> <p>Load available project templates configuration.</p> <p>Reads template configurations from the cookiecutter.json file in the templates directory. Each template contains information about its name, path, title, and description.</p> RETURNS DESCRIPTION <code>dict[str, Any]</code> <p>Dict[str, Any]: Template configuration dictionary where keys are template names and values are template information: {     \"template-name\": {         \"path\": \"relative/path\",         \"title\": \"Template Title\",         \"description\": \"Template description\"     } }</p> RAISES DESCRIPTION <code>FileNotFoundError</code> <p>If the configuration file doesn't exist</p> <code>JSONDecodeError</code> <p>If the configuration file is not valid JSON</p> Source code in <code>repo_scaffold/cli.py</code> <pre><code>def load_templates() -&gt; dict[str, Any]:\n    \"\"\"Load available project templates configuration.\n\n    Reads template configurations from the cookiecutter.json file in the templates directory.\n    Each template contains information about its name, path, title, and description.\n\n    Returns:\n        Dict[str, Any]: Template configuration dictionary where keys are template names\n            and values are template information:\n            {\n                \"template-name\": {\n                    \"path\": \"relative/path\",\n                    \"title\": \"Template Title\",\n                    \"description\": \"Template description\"\n                }\n            }\n\n    Raises:\n        FileNotFoundError: If the configuration file doesn't exist\n        json.JSONDecodeError: If the configuration file is not valid JSON\n    \"\"\"\n    config_path = get_package_path(\"templates/cookiecutter.json\")\n    with open(config_path, encoding=\"utf-8\") as f:\n        config = json.load(f)\n    return config[\"templates\"]\n</code></pre>"}]}