FROM apache/airflow:{{cookiecutter.airflow_version}}-python{{cookiecutter.python_version}}

# Build arguments for platform detection
ARG TARGETPLATFORM

# Build arguments for PyPI server authentication
{% if cookiecutter.use_private_pypi == "true" -%}
ARG PYPI_SERVER_USERNAME
ARG PYPI_SERVER_PASSWORD
{% endif -%}
ARG AIRFLOW_VERSION={{cookiecutter.airflow_version}}
ARG PYTHON_VERSION={{cookiecutter.python_version}}

# Build arguments for additional configuration
{% if cookiecutter.use_consul == "true" -%}
ARG CONSUL_HOST
ARG CONSUL_PORT=443
ARG CONSUL_TOKEN
{% endif -%}

# Use root user for build and file operations
USER root

# Install build dependencies for compiling Python packages with C extensions
# Only install build tools on ARM64 architecture where they are needed
RUN apt-get update && \
    if [ "$TARGETPLATFORM" = "linux/arm64" ]; then \
        apt-get install -y build-essential gcc g++ git; \
    fi && \
    rm -rf /var/lib/apt/lists/*

# Set up working directory in /app first
WORKDIR /app

# Set uv environment variables for authentication
{% if cookiecutter.use_private_pypi == "true" -%}
ENV UV_INDEX_{{cookiecutter.private_pypi_name | upper}}_USERNAME=${PYPI_SERVER_USERNAME} \
    UV_INDEX_{{cookiecutter.private_pypi_name | upper}}_PASSWORD=${PYPI_SERVER_PASSWORD}
{% endif -%}
{% if cookiecutter.use_consul == "true" -%}
ENV CONSUL_HOST=${CONSUL_HOST} \
    CONSUL_PORT=${CONSUL_PORT} \
    CONSUL_TOKEN=${CONSUL_TOKEN}
{% endif -%}

# Copy all project files to /app
COPY . .

# Install dependencies from pyproject.toml without disrupting the base environment
RUN --mount=type=cache,target=/root/.cache/uv \
    uv pip install --no-cache-dir \
    "apache-airflow==${AIRFLOW_VERSION}" \
    -e .

# Switch to Airflow's expected location and set up symbolic links
WORKDIR /opt/airflow
RUN ln -sf /app/{{cookiecutter.package_name}}/dags /opt/airflow/dags && \
    ln -sf /app/{{cookiecutter.package_name}}/config /opt/airflow/config && \
    ln -sf /app/{{cookiecutter.package_name}}/plugins /opt/airflow/plugins

# Ensure airflow user owns necessary permissions
RUN chown -R airflow:root /app /opt/airflow

# Switch back to airflow user
USER airflow
